// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Accounts renders SignIn, envoke sign in action, update state and rerender SignIn 1`] = `
<Styled(Container)
  style={
    Object {
      "backgroundColor": "#ffffff",
    }
  }
>
  <AppHeader
    headerText="Accounts"
    infoText="Here you can choose which accounts you want expenses from. Press [Save] to save the changes"
    onLeftButtonPress={[Function]}
    showBackButton={true}
  />
  <Styled(Container)
    style={
      Object {
        "justifyContent": "center",
      }
    }
  >
    <FlatList
      data={Array []}
      disableVirtualization={false}
      horizontal={false}
      initialNumToRender={10}
      keyExtractor={[Function]}
      maxToRenderPerBatch={10}
      numColumns={1}
      onEndReachedThreshold={2}
      renderItem={[Function]}
      scrollEventThrottle={50}
      updateCellsBatchingPeriod={50}
      windowSize={21}
    />
  </Styled(Container)>
  <Separator />
  <Styled(Button)
    onPress={[Function]}
    rounded={true}
    style={
      Array [
        Object {
          "alignSelf": "center",
          "height": 40,
          "justifyContent": "center",
          "marginBottom": 20,
          "marginTop": 20,
          "width": "90%",
        },
        Object {
          "backgroundColor": "#00263A",
        },
      ]
    }
  >
    <Styled(Text)
      style={
        Object {
          "alignSelf": "center",
          "color": "white",
          "fontWeight": "600",
        }
      }
    >
      Save
    </Styled(Text)>
  </Styled(Button)>
</Styled(Container)>
`;

exports[`Accounts renders SignIn, envoke sign in action, update state and rerender SignIn 2`] = `
<Styled(Container)
  style={
    Object {
      "backgroundColor": "#ffffff",
    }
  }
>
  <AppHeader
    headerText="Accounts"
    infoText="Here you can choose which accounts you want expenses from. Press [Save] to save the changes"
    onLeftButtonPress={[Function]}
    showBackButton={true}
  />
  <Styled(Container)
    style={
      Object {
        "justifyContent": "center",
      }
    }
  >
    <Styled(Spinner)
      color="#1c313a"
      style={
        Object {
          "alignItems": "center",
          "justifyContent": "center",
        }
      }
    />
  </Styled(Container)>
  <Separator />
  <Styled(Button)
    onPress={[Function]}
    rounded={true}
    style={
      Array [
        Object {
          "alignSelf": "center",
          "height": 40,
          "justifyContent": "center",
          "marginBottom": 20,
          "marginTop": 20,
          "width": "90%",
        },
        Object {
          "backgroundColor": "#00263A",
        },
      ]
    }
  >
    <Styled(Text)
      style={
        Object {
          "alignSelf": "center",
          "color": "white",
          "fontWeight": "600",
        }
      }
    >
      Save
    </Styled(Text)>
  </Styled(Button)>
</Styled(Container)>
`;

exports[`CreateBudget renders CreateBudget, envoke sign in action, update state and rerender CreateBudget 1`] = `
<Styled(Container)
  style={
    Array [
      Object {
        "backgroundColor": "#ffffff",
      },
      Object {
        "alignItems": "stretch",
      },
    ]
  }
>
  <AppHeader
    headerText="Create budget"
    infoText="Here you can create a new budget. The expense goals can be pre-filled based on your expenses for the last three months from your connected accounts."
    onLeftButtonPress={[Function]}
    showBackButton={true}
  />
  <BudgetForm
    budgetError=""
    budgetID=""
    budgetLoading={false}
    categoriesLoading={false}
    handleSubmit={[Function]}
    onCategoryChanged={[Function]}
    onIncomeChanged={[Function]}
    submitLoading={false}
    tmpCategories={Array []}
    tmpDisposable={0}
    tmpIncome={0}
    tmpTotalGoalsAmount={0}
  />
</Styled(Container)>
`;

exports[`CreateBudget renders CreateBudget, envoke sign in action, update state and rerender CreateBudget 2`] = `
<Styled(Container)
  style={
    Array [
      Object {
        "backgroundColor": "#ffffff",
      },
      Object {
        "alignItems": "stretch",
      },
    ]
  }
>
  <AppHeader
    headerText="Create budget"
    infoText="Here you can create a new budget. The expense goals can be pre-filled based on your expenses for the last three months from your connected accounts."
    onLeftButtonPress={[Function]}
    showBackButton={true}
  />
  <BudgetForm
    budgetError=""
    budgetID=""
    budgetLoading={true}
    categoriesLoading={true}
    handleSubmit={[Function]}
    onCategoryChanged={[Function]}
    onIncomeChanged={[Function]}
    submitLoading={false}
    tmpCategories={Array []}
    tmpDisposable={0}
    tmpIncome={0}
    tmpTotalGoalsAmount={0}
  />
</Styled(Container)>
`;

exports[`EditDisposable renders EditDisposable, envoke editDisposable action, update state and rerender EditDisposable 1`] = `
<Styled(Container)
  style={
    Object {
      "backgroundColor": "#ffffff",
    }
  }
>
  <AppHeader
    headerText="Disposable"
    infoText="Here you can edit your disposable and select which goals for expenses your changes will affect. Press [Continue] to see a preview of the changes."
    onLeftButtonPress={[Function]}
    showBackButton={true}
  />
  <DisposableForm
    budgetLoading={false}
    categoriesLoading={true}
    categoriesSelected={[Function]}
    categoryItems={Array []}
    disposable={50}
    disposableCalculationLoading={false}
    disposableChanged={[Function]}
    disposableError=""
    disposableLoading={false}
    onCheckBoxPressed={[Function]}
    onContinuePressed={[Function]}
    onDisposableChanged={[Function]}
    selectedCategories={Array []}
    subtractionsLoading={false}
  />
</Styled(Container)>
`;

exports[`EditDisposable renders EditDisposable, envoke editDisposable action, update state and rerender EditDisposable 2`] = `
<Styled(Container)
  style={
    Object {
      "backgroundColor": "#ffffff",
    }
  }
>
  <AppHeader
    headerText="Disposable"
    infoText="Here you can edit your disposable and select which goals for expenses your changes will affect. Press [Continue] to see a preview of the changes."
    onLeftButtonPress={[Function]}
    showBackButton={true}
  />
  <DisposableForm
    budgetLoading={false}
    categoriesLoading={true}
    categoriesSelected={[Function]}
    categoryItems={Array []}
    disposable={50}
    disposableCalculationLoading={false}
    disposableChanged={[Function]}
    disposableError=""
    disposableLoading={true}
    onCheckBoxPressed={[Function]}
    onContinuePressed={[Function]}
    onDisposableChanged={[Function]}
    selectedCategories={Array []}
    subtractionsLoading={false}
    tmpDisposable={50}
  />
</Styled(Container)>
`;

exports[`ExpenseOverview renders ExpenseOverview, envoke getExpensesOfMonth action, update state and rerender ExpenseOverview 1`] = `
<Styled(Container)
  style={
    Object {
      "backgroundColor": "#ffffff",
    }
  }
>
  <AppHeader
    headerText="Expense overview"
    infoText="Here you see an overview of your spending compared to your budget. Press the bell icon on any expense item to get a notification if your spendings exceed the expense goal."
    onLeftButtonPress={[Function]}
  />
  <Styled(Container)>
    <Styled(Container)>
      <Styled(ViewNB)
        style={
          Object {
            "flex": 0.82,
          }
        }
      >
        <FlatList
          data={Array []}
          disableVirtualization={false}
          horizontal={false}
          initialNumToRender={10}
          keyExtractor={[Function]}
          maxToRenderPerBatch={10}
          numColumns={1}
          onEndReachedThreshold={2}
          onRefresh={[Function]}
          refreshing={false}
          renderItem={[Function]}
          scrollEventThrottle={50}
          updateCellsBatchingPeriod={50}
          windowSize={21}
        />
        <Separator />
      </Styled(ViewNB)>
      <Styled(ViewNB)
        style={
          Object {
            "flex": 0.18,
          }
        }
      >
        <Styled(ViewNB)
          style={
            Array [
              Object {
                "flex": 1,
                "justifyContent": "space-between",
                "marginBottom": 0,
              },
              Object {
                "paddingVertical": "5%",
              },
            ]
          }
        >
          <Styled(ViewNB)
            style={
              Array [
                Object {
                  "flexDirection": "row",
                  "justifyContent": "space-between",
                  "paddingLeft": 15,
                  "paddingRight": 18,
                },
                Object {
                  "flex": 1,
                },
              ]
            }
          >
            <Styled(Text)
              style={
                Array [
                  Object {
                    "alignSelf": "flex-start",
                    "fontSize": 16,
                    "marginLeft": 5,
                  },
                  Object {
                    "color": "#003755",
                  },
                ]
              }
            >
              Total debt per month
            </Styled(Text)>
            <Styled(Text)
              style={
                Array [
                  Object {
                    "alignSelf": "flex-start",
                    "fontSize": 16,
                    "marginLeft": 5,
                  },
                  Object {
                    "color": "#003755",
                  },
                ]
              }
            >
              0
               
              kr
            </Styled(Text)>
          </Styled(ViewNB)>
          <Styled(ViewNB)
            style={
              Array [
                Object {
                  "flexDirection": "row",
                  "justifyContent": "space-between",
                  "paddingLeft": 15,
                  "paddingRight": 18,
                },
                Object {
                  "flex": 1,
                },
              ]
            }
          >
            <Styled(Text)
              style={
                Array [
                  Object {
                    "alignSelf": "flex-start",
                    "fontSize": 16,
                    "marginLeft": 5,
                  },
                  Object {
                    "color": "#003755",
                  },
                ]
              }
            >
              Total expenses
            </Styled(Text)>
            <Styled(Text)
              style={
                Array [
                  Object {
                    "alignSelf": "flex-start",
                    "fontSize": 16,
                    "marginLeft": 5,
                  },
                  Object {
                    "color": "#003755",
                  },
                ]
              }
            >
              0
               
              kr
            </Styled(Text)>
          </Styled(ViewNB)>
          <Styled(ViewNB)
            style={
              Array [
                Object {
                  "flexDirection": "row",
                  "justifyContent": "space-between",
                  "paddingLeft": 15,
                  "paddingRight": 18,
                },
                Object {
                  "flex": 1,
                },
              ]
            }
          >
            <Styled(Text)
              style={
                Array [
                  Object {
                    "alignSelf": "flex-start",
                    "fontSize": 16,
                    "marginLeft": 5,
                  },
                  Object {
                    "color": "#003755",
                  },
                ]
              }
            >
              Disposable
            </Styled(Text)>
            <Styled(Text)
              style={
                Array [
                  Object {
                    "alignSelf": "flex-start",
                    "fontSize": 16,
                    "marginLeft": 5,
                  },
                  Object {
                    "color": "#003755",
                  },
                ]
              }
            >
              50
               
              kr
            </Styled(Text)>
          </Styled(ViewNB)>
        </Styled(ViewNB)>
      </Styled(ViewNB)>
    </Styled(Container)>
  </Styled(Container)>
</Styled(Container)>
`;

exports[`ExpenseOverview renders ExpenseOverview, envoke getExpensesOfMonth action, update state and rerender ExpenseOverview 2`] = `
<Styled(Container)
  style={
    Object {
      "backgroundColor": "#ffffff",
    }
  }
>
  <AppHeader
    headerText="Expense overview"
    infoText="Here you see an overview of your spending compared to your budget. Press the bell icon on any expense item to get a notification if your spendings exceed the expense goal."
    onLeftButtonPress={[Function]}
  />
  <Styled(Container)>
    <Styled(Spinner)
      color="#1c313a"
      style={
        Object {
          "flex": 1,
        }
      }
    />
  </Styled(Container)>
</Styled(Container)>
`;

exports[`SignIn renders SignIn, envoke sign in action, update state and rerender SignIn 1`] = `
<KeyboardAvoidingView
  behavior="padding"
  keyboardVerticalOffset={0}
  style={
    Object {
      "alignItems": "center",
      "backgroundColor": "#03426A",
      "flex": 2,
      "justifyContent": "center",
    }
  }
>
  <TouchableWithoutFeedback
    accessible={false}
    onPress={[Function]}
  >
    <Styled(Container)
      style={
        Object {
          "alignSelf": "stretch",
        }
      }
    >
      <View
        style={
          Array [
            Object {
              "alignItems": "center",
              "justifyContent": "flex-end",
            },
            Object {
              "flex": 2,
            },
          ]
        }
      >
        <Logo
          logoText="Welcome to BudgetBud"
        />
      </View>
      <AuthForm
        authLoading={false}
        cprNumber=""
        handleSubmit={[Function]}
        isSignIn={true}
        onCprNumberChange={[Function]}
        onSecondInputChange={[Function]}
        secondInput=""
      />
      <Styled(Container)>
        <Styled(Container)
          style={
            Object {
              "alignItems": "flex-start",
              "alignSelf": "center",
              "flexShrink": 1,
              "paddingTop": 13,
              "width": "80%",
            }
          }
        >
          <Styled(Button)
            onPress={[Function]}
            style={
              Object {
                "height": 30,
                "paddingLeft": 5,
              }
            }
            transparent={true}
          >
            <Styled(Label)
              style={
                Object {
                  "color": "rgba(255,255,255,0.6)",
                }
              }
            >
              Forgot code?
            </Styled(Label)>
          </Styled(Button)>
          <Styled(Button)
            onPress={[Function]}
            style={
              Object {
                "height": 30,
                "paddingLeft": 5,
              }
            }
            transparent={true}
          >
            <Styled(Label)
              style={
                Object {
                  "color": "rgba(255,255,255,0.6)",
                }
              }
            >
              New user?
            </Styled(Label)>
          </Styled(Button)>
        </Styled(Container)>
      </Styled(Container)>
    </Styled(Container)>
  </TouchableWithoutFeedback>
</KeyboardAvoidingView>
`;

exports[`SignIn renders SignIn, envoke sign in action, update state and rerender SignIn 2`] = `
<KeyboardAvoidingView
  behavior="padding"
  keyboardVerticalOffset={0}
  style={
    Object {
      "alignItems": "center",
      "backgroundColor": "#03426A",
      "flex": 2,
      "justifyContent": "center",
    }
  }
>
  <TouchableWithoutFeedback
    accessible={false}
    onPress={[Function]}
  >
    <Styled(Container)
      style={
        Object {
          "alignSelf": "stretch",
        }
      }
    >
      <View
        style={
          Array [
            Object {
              "alignItems": "center",
              "justifyContent": "flex-end",
            },
            Object {
              "flex": 2,
            },
          ]
        }
      >
        <Logo
          logoText="Welcome to BudgetBud"
        />
      </View>
      <AuthForm
        authLoading={true}
        cprNumber=""
        handleSubmit={[Function]}
        isSignIn={true}
        onCprNumberChange={[Function]}
        onSecondInputChange={[Function]}
        secondInput=""
      />
      <Styled(Container)>
        <Styled(Container)
          style={
            Object {
              "alignItems": "flex-start",
              "alignSelf": "center",
              "flexShrink": 1,
              "paddingTop": 13,
              "width": "80%",
            }
          }
        >
          <Styled(Button)
            onPress={[Function]}
            style={
              Object {
                "height": 30,
                "paddingLeft": 5,
              }
            }
            transparent={true}
          >
            <Styled(Label)
              style={
                Object {
                  "color": "rgba(255,255,255,0.6)",
                }
              }
            >
              Forgot code?
            </Styled(Label)>
          </Styled(Button)>
          <Styled(Button)
            onPress={[Function]}
            style={
              Object {
                "height": 30,
                "paddingLeft": 5,
              }
            }
            transparent={true}
          >
            <Styled(Label)
              style={
                Object {
                  "color": "rgba(255,255,255,0.6)",
                }
              }
            >
              New user?
            </Styled(Label)>
          </Styled(Button)>
        </Styled(Container)>
      </Styled(Container)>
    </Styled(Container)>
  </TouchableWithoutFeedback>
</KeyboardAvoidingView>
`;
