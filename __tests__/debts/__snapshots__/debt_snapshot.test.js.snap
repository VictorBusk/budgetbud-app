// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Debt renders CreateDebt as expected 1`] = `
<Styled(Container)
  style={
    Object {
      "backgroundColor": "#ffffff",
    }
  }
>
  <AppHeader
    headerText="Create Debt"
    infoText="Here you can create a debt item. Choose when the debt must be paid off and from which expense goals the debt should be subtracted. Press [Continue] to see a preview of the changes."
    onLeftButtonPress={[Function]}
    showBackButton={true}
  />
  <DebtForm
    amount=""
    amountChanged={[Function]}
    categoriesLoading={false}
    categoriesSelected={[Function]}
    categoryItems={Array []}
    debtLoading={false}
    expirationDate=""
    expirationDateChanged={[Function]}
    name=""
    nameChanged={[Function]}
    onContinuePress={[Function]}
    selectedCategories={Array []}
  />
</Styled(Container)>
`;

exports[`Debt renders DebtForm in loading state as expected 1`] = `
<Styled(Container)
  accessible={false}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
>
  <View
    style={
      Array [
        Object {
          "alignSelf": "center",
          "marginBottom": 5,
          "marginTop": 10,
          "width": "90%",
        },
        Object {
          "paddingTop": 10,
        },
      ]
    }
  >
    <Styled(Label)
      style={
        Array [
          Object {
            "alignSelf": "flex-start",
            "fontSize": 14,
            "fontWeight": "400",
            "marginLeft": 5,
          },
          Object {
            "color": "#003755",
          },
        ]
      }
    >
      Enter name
    </Styled(Label)>
    <Styled(Item)
      rounded={true}
      style={
        Array [
          Object {
            "alignSelf": "center",
            "height": 40,
            "marginVertical": 5,
            "paddingVertical": 0,
          },
          Object {
            "backgroundColor": "#F6F7F9",
            "borderColor": "#003755",
          },
        ]
      }
    >
      <Styled(Input)
        onChangeText={[Function]}
        placeholder="Student loan"
        placeholderTextColor="#7F9BAA"
        style={
          Object {
            "color": "#003755",
          }
        }
      />
    </Styled(Item)>
  </View>
  <View
    style={
      Object {
        "alignSelf": "center",
        "marginBottom": 5,
        "marginTop": 10,
        "width": "90%",
      }
    }
  >
    <Styled(Label)
      style={
        Array [
          Object {
            "alignSelf": "flex-start",
            "fontSize": 14,
            "fontWeight": "400",
            "marginLeft": 5,
          },
          Object {
            "color": "#003755",
          },
        ]
      }
    >
      Enter amount
    </Styled(Label)>
    <Styled(Item)
      rounded={true}
      style={
        Array [
          Object {
            "alignSelf": "center",
            "height": 40,
            "marginVertical": 5,
            "paddingVertical": 0,
          },
          Object {
            "backgroundColor": "#F6F7F9",
            "borderColor": "#003755",
          },
        ]
      }
    >
      <Styled(Input)
        keyboardType="numeric"
        onChangeText={[Function]}
        placeholder="5000"
        placeholderTextColor="#7F9BAA"
        style={
          Object {
            "color": "#003755",
          }
        }
        value="undefined"
      />
    </Styled(Item)>
  </View>
  <View
    style={
      Object {
        "marginVertical": 10,
      }
    }
  >
    <Separator />
  </View>
  <View
    style={
      Object {
        "alignSelf": "center",
        "marginBottom": 5,
        "marginTop": 10,
        "width": "90%",
      }
    }
  >
    <Styled(Label)
      style={
        Array [
          Object {
            "alignSelf": "flex-start",
            "fontSize": 14,
            "fontWeight": "400",
            "marginLeft": 5,
          },
          Object {
            "color": "#003755",
          },
        ]
      }
    >
      Enter the desired date for the completed payment.
    </Styled(Label)>
    <DatePicker
      TouchableComponent={[Function]}
      androidMode="default"
      cancelBtnText="Cancel"
      confirmBtnText="Ok"
      customStyles={
        Object {
          "dateInput": Object {
            "backgroundColor": "#F6F7F9",
            "borderColor": "#003755",
            "borderRadius": 100,
            "borderWidth": 1,
            "marginRight": 5,
          },
          "dateText": Object {
            "color": "#003755",
            "fontSize": 17,
          },
        }
      }
      date=""
      disabled={false}
      duration={300}
      format="DD-MM-YYYY"
      height={259}
      hideText={false}
      iconComponent={
        <Styled(Icon)
          name="md-calendar"
          style={
            Object {
              "color": "#295E80",
            }
          }
          virtual={undefined}
        />
      }
      iconSource={1}
      minDate={2018-05-29T16:45:44.577Z}
      modalOnResponderTerminationRequest={[Function]}
      mode="date"
      onDateChange={[Function]}
      placeholder=""
      showIcon={true}
      style={
        Array [
          Object {
            "alignSelf": "center",
            "height": 40,
            "marginVertical": 5,
            "paddingVertical": 0,
          },
          Object {
            "width": "100%",
          },
        ]
      }
    />
  </View>
  <View
    style={
      Object {
        "marginBottom": 10,
        "marginTop": 5,
      }
    }
  >
    <Separator />
  </View>
  <View
    style={
      Object {
        "alignSelf": "stretch",
        "flex": 2,
      }
    }
  >
    <View
      style={
        Object {
          "alignSelf": "center",
          "marginBottom": 5,
          "marginTop": 10,
          "width": "90%",
        }
      }
    >
      <Styled(Label)
        style={
          Array [
            Object {
              "alignSelf": "flex-start",
              "fontSize": 14,
              "fontWeight": "400",
              "marginLeft": 5,
            },
            Object {
              "color": "#003755",
            },
          ]
        }
      >
        Specify where the debt is to be deducted.
      </Styled(Label)>
    </View>
    <FlatList
      disableVirtualization={false}
      horizontal={false}
      initialNumToRender={10}
      keyExtractor={[Function]}
      maxToRenderPerBatch={10}
      numColumns={1}
      onEndReachedThreshold={2}
      renderItem={[Function]}
      scrollEventThrottle={50}
      updateCellsBatchingPeriod={50}
      windowSize={21}
    />
  </View>
  <View
    style={
      Object {
        "marginTop": 5,
      }
    }
  >
    <Separator />
  </View>
  <Styled(Button)
    onPress={[Function]}
    rounded={true}
    style={
      Array [
        Object {
          "alignSelf": "center",
          "height": 40,
          "justifyContent": "center",
          "marginBottom": 20,
          "marginTop": 20,
          "width": "90%",
        },
        Object {
          "backgroundColor": "#00263A",
        },
      ]
    }
  >
    <Styled(Spinner)
      color="#D0D0D0"
    />
  </Styled(Button)>
</Styled(Container)>
`;

exports[`Debt renders DebtOverview as expected 1`] = `
<Styled(Container)
  style={
    Object {
      "backgroundColor": "#ffffff",
    }
  }
>
  <ConfirmDialog
    confirmCallback={[Function]}
    debtLoading={false}
    text="Do you want to delete the selected debt?"
    title="Confirm deletion"
  />
  <Styled(Container)>
    <AppHeader
      headerText="Debt overview"
      infoText="Here you can see all your created debt items. [Create debt] allows you to add a new debt item. Edit a debt item by pressing the pencil icon and delete the debt item by pressing the trash can icon."
      onLeftButtonPress={[Function]}
      showBackButton={true}
    />
    <Styled(Container)
      style={
        Object {
          "flex": 4,
          "justifyContent": "center",
        }
      }
    >
      <FlatList
        data={Array []}
        disableVirtualization={false}
        horizontal={false}
        initialNumToRender={10}
        keyExtractor={[Function]}
        maxToRenderPerBatch={10}
        numColumns={1}
        onEndReachedThreshold={2}
        renderItem={[Function]}
        scrollEventThrottle={50}
        updateCellsBatchingPeriod={50}
        windowSize={21}
      />
    </Styled(Container)>
    <Separator />
    <Styled(Button)
      onPress={[Function]}
      rounded={true}
      style={
        Array [
          Object {
            "alignSelf": "center",
            "height": 40,
            "justifyContent": "center",
            "marginBottom": 20,
            "marginTop": 20,
            "width": "90%",
          },
          Object {
            "backgroundColor": "#00263A",
          },
        ]
      }
    >
      <Styled(Text)
        style={
          Object {
            "alignSelf": "center",
            "color": "white",
            "fontWeight": "600",
          }
        }
      >
        Create debt
      </Styled(Text)>
    </Styled(Button)>
  </Styled(Container)>
</Styled(Container)>
`;

exports[`Debt renders DebtPreview as expected 1`] = `
<Styled(Container)
  style={
    Object {
      "backgroundColor": "#ffffff",
    }
  }
>
  <AppHeader
    headerText="Debt preview"
    infoText="Here is a preview of how your changes affect your budget. Press [Save] to save these changes."
    onLeftButtonPress={[Function]}
    showBackButton={true}
  />
  <Styled(Content)
    style={
      Object {
        "flex": 4,
      }
    }
  >
    <FlatList
      data={Array []}
      disableVirtualization={false}
      horizontal={false}
      initialNumToRender={10}
      keyExtractor={[Function]}
      maxToRenderPerBatch={10}
      numColumns={1}
      onEndReachedThreshold={2}
      renderItem={[Function]}
      scrollEventThrottle={50}
      updateCellsBatchingPeriod={50}
      windowSize={21}
    />
  </Styled(Content)>
  <Separator />
  <Styled(Button)
    onPress={[Function]}
    rounded={true}
    style={
      Array [
        Object {
          "alignSelf": "center",
          "height": 40,
          "justifyContent": "center",
          "marginBottom": 20,
          "marginTop": 20,
          "width": "90%",
        },
        Object {
          "backgroundColor": "#00263A",
        },
      ]
    }
  >
    <Styled(Text)
      style={
        Object {
          "alignSelf": "center",
          "color": "white",
          "fontWeight": "600",
        }
      }
    >
      Save
    </Styled(Text)>
  </Styled(Button)>
</Styled(Container)>
`;

exports[`Debt renders EditDebt as expected 1`] = `
<Styled(Container)
  style={
    Object {
      "backgroundColor": "#ffffff",
    }
  }
>
  <AppHeader
    headerText="Edit debt"
    infoText="Here you can edit a debt item. Choose when the debt must be paid off and from which expense goals the debt should be subtracted. Press [Continue] to see a preview of the changes."
    onLeftButtonPress={[Function]}
    showBackButton={true}
  />
  <DebtForm
    amount=""
    amountChanged={[Function]}
    categoriesLoading={false}
    categoriesSelected={[Function]}
    categoryItems={Array []}
    debtLoading={false}
    expirationDate=""
    expirationDateChanged={[Function]}
    name=""
    nameChanged={[Function]}
    onContinuePress={[Function]}
    selectedCategories={Array []}
  />
</Styled(Container)>
`;
